@top Program { expression* }

@skip { space | LineComment }

commaSep<content> { "" | content ("," content)* }
commaSep1<content> { content ("," content)* }
arrowSep<content> { content ("->" content)* }
parenthesized<content> { "(" content ")" }
kw<term> { @specialize[@name={term}]<Identifier, term> }

expression {
  Identifier |
  String |
  Boolean |
  Number |
  DoBlock |
  ParameterSection |
  Cast |
  Definition {
    kw<"let"> LValue ParameterSection? ReturnValue? AssignmentOperator RValue
  } |
  If |
  Struct |
  Trait |
  Impl |
  HaskellStyle |
  BinaryOperation {
    LValue
    (ArithmeticOperator | ComparisonOperator | BooleanOperator | AssignmentOperator)
    RValue
  }
}

ReturnValue {
  "=>" Type
}

ParameterSection {
  "(" commaSep<Parameter> ")"
}

Type {
  Identifier
}

Parameter {
  Identifier ":" Type
}

LValue {
  Identifier | String | Boolean | Number
}

RValue {
  expression
}
DoBlock {
  kw<"do"> expression* kw<"end">
}

If {
  kw<"if"> expression kw<"then"> expression kw<"else"> expression kw<"end">
}

@precedence { is @left, satisfies @left }
Struct {
    kw<"struct"> Identifier AssignmentOperator ParameterSection (!is isSection)? (!satisfies satisfiesSection)?
}

isSection {
    kw<"is"> Type
}

satisfiesSection {
    kw<"satisfies"> parenthesized<expression>
}

Trait {
  kw<"trait"> Identifier AssignmentOperator expression
}

Impl {
  kw<"impl"> Identifier kw<"for"> Identifier AssignmentOperator expression
}

HaskellStyle {
  Identifier "::" arrowSep<Identifier> // AssignmentOperator expression
}

Cast {
  LValue kw<"as"> Type
}

@local tokens {
  blockCommentEnd { "*/" }
  blockCommentNewline { "\n" }
  @else blockCommentContent
}

@tokens {
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  word { identifierChar (identifierChar | @digit)* }
  Identifier { word }
  String { '"' (!["\\] | "\\" _)* '"' }
  Boolean { "True" | "False" }
  LineComment { "#" ![\n]* }
  BlockComment { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd }
  AssignmentOperator { "=" }
  ArithmeticOperator { "+" | "-" | "*" | "/" | "%" }
  ComparisonOperator { "==" | "!=" | "<" | "<=" | ">" | ">=" }
  BooleanOperator { "&&" | "||" }
  Number { $[0-9]+ }
  space { $[ \t\n\r]+ }

  "(" ")"
  @precedence { ArithmeticOperator, ComparisonOperator, BooleanOperator, AssignmentOperator, Boolean, Identifier }
}

@detectDelim
