# Booleans

True
False

==>

Program(Boolean, Boolean)

# Identifiers

one
Two_Three

==>

Program(Identifier, Identifier)

# Strings

"hello"
"one\"\\two"

==>

Program(String, String)

# Applications

println "Hello World"

==>

Program(Identifier,String)

# Boolean operators

True && False

==>

Program(BinaryOperation(LValue(Boolean),BooleanOperator,RValue(Boolean)))

# Comparison operator

1 == 1

==>

Program(BinaryOperation(LValue(Number),ComparisonOperator,RValue(Number)))

# Arithmetic operator

2 + 3

==>

Program(BinaryOperation(LValue(Number),ArithmeticOperator,RValue(Number)))

# Simple definiton

let abc = 123

==>

Program(Definition(let,LValue(Identifier),AssignmentOperator,RValue(Number)))

# Definiton with parameters

let mul (x: Int, y: Int) = x * y

==>

Program(Definition(let,LValue(Identifier),ParameterSection("(",Parameter(Identifier,Identifier),Parameter(Identifier,Identifier),")"),AssignmentOperator,RValue(BinaryOperation(LValue(Identifier),ArithmeticOperator,RValue(Identifier)))))

# Definiton with parameters and return value

let mul (x: Int, y: Int) => Int = x * y

==>

Program(Definition(let,LValue(Identifier),ParameterSection("(",Parameter(Identifier,Identifier),Parameter(Identifier,Identifier),")"),ReturnValue(Identifier),AssignmentOperator,RValue(BinaryOperation(LValue(Identifier),ArithmeticOperator,RValue(Identifier)))))

# Hello World

let main = do
  println "Hello World"
end

==>

Program(Definition(let,LValue(Identifier),AssignmentOperator,RValue(DoBlock(do,Identifier,String,end))))

# If

if a == b then
  1
else
  2
end

==>

Program(If(if,BinaryOperation(LValue(Identifier),ComparisonOperator,RValue(Identifier)),then,Number,else,Number,end))

# Struct

struct Person = (name: String)

==>

Program(Struct(struct,Identifier,AssignmentOperator,ParameterSection("(",Parameter(Identifier,Identifier),")")))

# Trait

trait Show = do
  show :: Self -> String
end

==>

Program(Trait(trait,Identifier,AssignmentOperator,DoBlock(do,HaskellStyle(Identifier,Identifier,Identifier),end)))